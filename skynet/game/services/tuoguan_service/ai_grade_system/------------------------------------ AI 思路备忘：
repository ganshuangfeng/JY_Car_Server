------------------------------------ AI 思路备忘：

决策点：
	普通操作：  可以操作
		大油门
		小油门
		放道具

	放道具：  可以操作，考虑到要消耗 Mp

		释放各种道具
	

*.方向，位置，车身上的效果buff , 天气 ，路上的奖励，路上的障碍， 都会影响AI决策

*. 以游戏的 直接胜利条件 或 间接胜利条件 为参考数据，来给可能的操作打分，
	
	游戏直接胜利条件：
		敌人 hp 减为0
		自己 圈数 达到了

	间接胜利条件：
		暂停一回合
		不能获奖
		...


*. 打分 的 比例 在不同的当前值下会有所不同，比如，敌人血量已经很低了，这时减血量的打分会高一点

*.一个决策点会有 多种行为，有些行为并不会终止这个决策点，有些行为会终止这个决策点。


*.不同的决策点的逻辑，可以硬编出来，然后统计出 这个决策点  的不同行为，最终的 各种情况的概率 和 执行的操作。  最后再统一为这些操作打分。
	
	一个决策点的行为，应该是一种树状结构，同一个操作可以在不同的分支下 执行。

*.整个AI代码需要运行在一个 大的数据环境中。


*.代码功能分层，组装成最终数据，各个模块做好各个模块的事，递归操作 n 步就不算了，
	

	

{ type = "act" , name = "小油门" ,  }


---------------------------------------------------------------------------------------------------------------------
不要搞的太复杂了，大油门，小油门，算出各自的概率，

AI可以被替换，AI可扩展

1.使用道具是受固定的检查逻辑处理，在特定的情况下使用道具

2.普通操作的AI就是检查使用道具 + 大小油门判定

3.放置类AI，根据放置的东西的不同来，具体处理

4.n选1类的AI，特定逻辑，优先


所有奖励，都用type_id来表示，每个奖励的数值，从策划配置里面去获取，

每个奖励，都有效果，比如同一个type_id,有直接吃到路面奖励的效果，有n选1的效果，有使用道具的效果，如果是可以放置在路上也有效果，

效果：加血，加圈数，加攻击力，造成伤害，增加miss概率，增加暴击概率，连击次数，攻击强化(立刻加攻 + 获得加攻额外奖励 ) ，回血强化，动力强化，放置路障，加防护盾，电锯强化，。。。

先算出效果，再根据效果评分，



小油门：
	1/6 type_id 停留(停留效果，坦克技能伤害  ，路面奖励加血) ，1/6


-----------------------------------------------------------------------------------
*.使用道具：
	不同的车，对不同的道具，判定的逻辑不同

	*.有优先判定使用哪个道具
	*.每个道具有不同的逻辑确定是否使用它 ，是否有多少概率使用它
	*.会有总的使用道具个数限制 ，？
	

*.n选1：
	*.不同的车 对 不同的选项type_id, 不同的权重
	*.在不同的判断逻辑中，可以提升 or 减少权重。

*.选择位置：
	*.不同的车对不同的路障，有不同的选择逻辑，
	*.最普通的就是随机选择，
	*.也会有特定的逻辑选择，从给出的选项中，选择最优的，比如拦截路障得放在敌人脸上，
	*.如果选择位置有多个逻辑，那么得逐个处理，


*.大小油门：
	*.默认的大小油门有选择权重
	*.不同的判断逻辑可能会增加  or  减少对应的大小油门的权重。 




------------------------------------------------------------------------------------
*.以价值为核心来写，先以大小油门，不管配置，不管其他情况，先用法拉利来写

价值确定各个模块分开，价值确定和 选择 分开 ， 多个完美分就从里面随机，不然就是从分数由大往小找


*.以大小油门为例，每个奖励会有一个停留的概率，也有经过的概率，这个概率可以算出来，并且得考虑到拦截路障等的影响

	每个奖励有一个分数判断队列，哪一个逻辑ok就返回其对应的分数，

每个奖励的分数如何 判定比较科学，


如果算伤害得考虑到自己的buff , 自己的暴击，他人的miss ，自己的连击等等。

普通操作
用道具 （ 那个 ）
大小油门
选位置
n选1



*选择操作：
	普通操作：
		用道具：哪个道具 --- 效果：(加血(我)--值---gl ，伤害(别人)--值---gl , 放地雷--值1---100% ，超能药剂---2 )
		大小油门：小油门：( 伤害(别人)---值---gl , 加位置---1---100% ， 加位置---1---5/6 ，1/6--加速--2 ，1/6---加攻---3  )

*算出效果期望值：	
	x*px + x2*px2

（预先决策系统）

*对效果打分的系统：
	1分是一个基准效果分，比如效果就是伤害1点
	加血：
		血量低 + 加血值 = 分数

	伤害：


	加圈数：
		直接分数

	跑距离：


	获得道具：
		直接分数

*每个决策操作，按分数最大的选择




1.先算出 大小油门的效果， 算出某种操作的 概率，效果集合 
2.再根据 效果来确定价值 ，不同的效果在不同的情况下，价值分数不一样 （ 可能会有不同的逻辑判断，或者专门的系统来打分 ）（ 可以对相同的概率的效果先做一次合并 ，可以不用合并，直接算相同效果的数学期望 ）
3.根据价值选择，来确定使用大小油门  确定使用的操作


算出各个操作选项的 效果的数学期望，先将相同的概率的效果合并一下

例如：
[小油门] = { [1] = { gl = 20 , effect_key = "add_hp" , effect_value = xx } , [2] = { gl = 20 , effect_key = "add_hp" , effect_value = xx }  }

如何计算这个概率 和 效果值，是根据不同的 子模块自己来确定的，他们自己算出来之后，扔到一个集合里面去。



决策点-> 决策点的操作 -> 每个操作产生的效果 -> 效果平均值 -> 对每个类型效果打分 -> 分数求和 -> 按分数最高选择

